<?php
/**
 * Created by PhpStorm.
 * User: moses
 * Date: 15/10/17
 * Time: 4:59 PM
 */
namespace Modules\Mpesa\Classes;

use Config;

/**
 * Class Mpesa
 * @package Safaricom\Mpesa
 */
class Mpesa
{

    public $slug;

    public $token;

    public function __constructor($slug = '')
    {

        if (!$this->slug) {
            $slug = Config::get('mpesa.default');
        }

        $this->token = generateToken();
    }

    /**
     * This is used to generate tokens
     * @return mixed
     */
    public function generateToken()
    {

        $response = $this->makeCall('oauth/v1/generate?grant_type=client_credentials', is_initial:true);

        print_r($response);exit;

        return $response['access_token'];

        //xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx

    }

    public function registerUrl()
    {
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");
        $business_shortcode = Config::get("mpesa.accounts.$this->slug.business_shortcode");
        $confirmation_url = Config::get("mpesa.accounts.confirmation_url");
        $validation_url = Config::get("mpesa.accounts.validation_url");

        $data = array(
            'ValidationURL' => $confirmation_url,
            'ConfirmationURL' => $validation_url,
            'ResponseType' => "Completed",
            'ShortCode' => $party_a,
        );

        $response = $this->makeCall('/mpesa/c2b/v1/registerurl', $data, is_initial:true);

        return $response;

    }


    /**
     * Use this function to initiate an STKPush Simulation
     * @param $BusinessShortCode | The organization shortcode used to receive the transaction.
     * @param $LipaNaMpesaPasskey | The password for encrypting the request. This is generated by base64 encoding BusinessShortcode, Passkey and Timestamp.
     * @param $TransactionType | The transaction type to be used for this request. Only CustomerPayBillOnline is supported.
     * @param $Amount | The amount to be transacted.
     * @param $PartyA | The MSISDN sending the funds.
     * @param $PartyB | The organization shortcode receiving the funds
     * @param $PhoneNumber | The MSISDN sending the funds.
     * @param $CallBackURL | The url to where responses from M-Pesa will be sent to.
     * @param $AccountReference | Used with M-Pesa PayBills.
     * @param $TransactionDesc | A description of the transaction.
     * @param $Remark | Remarks
     * @return mixed|string
     */
    public function stkPush($amount, $phone, $account, $remark = '')
    {
        $type = Config::get("mpesa.accounts.$this->slug.type");
        $initiator_name = Config::get("mpesa.accounts.$this->slug.initiator_name");
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");
        $party_b = Config::get("mpesa.accounts.$this->slug.party_b");
        $business_shortcode = Config::get("mpesa.accounts.$this->slug.business_shortcode");
        $passkey = Config::get("mpesa.accounts.$this->slug.passkey");
        $stkpush_url = Config::get("mpesa.accounts.stkpush_url");

        $timestamp = date("Ymdhis");

        $password = base64_encode($business_shortcode . $passkey . $timestamp);
        //Base64 Encode (Business Short Code + PassKey + Timestamp)

        $data = array(
            'BusinessShortCode' => $business_shortcode,
            'Password' => $password,
            'Timestamp' => $timestamp,
            'TransactionType' => ($type == 'paybill') ? 'CustomerPayBillOnline' : 'CustomerBuyGoodsOnline',
            'Amount' => $amount,
            'PartyA' => $party_a,
            'PartyB' => $party_b,
            'PhoneNumber' => $phone,
            'CallBackURL' => $stkpush_url,
            'AccountReference' => $account,
            'TransactionDesc' => $remark,
        );

        $response = $this->makeCall('/mpesa/stkpush/v1/processrequest', $data, token:$password, is_initial:true);

        return $response;

    }

    /**
     * Use this function to initiate an STKPush Status Query request.
     * @param $checkoutRequestID | Checkout RequestID
     * @param $businessShortCode | Business Short Code
     * @param $password | Password
     * @param $timestamp | Timestamp
     * @return mixed|string
     */
    public function STKPushQuery($checkout_request_id)
    {

        $type = Config::get("mpesa.accounts.$this->slug.type");
        $initiator_name = Config::get("mpesa.accounts.$this->slug.initiator_name");
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");
        $party_b = Config::get("mpesa.accounts.$this->slug.party_b");
        $business_shortcode = Config::get("mpesa.accounts.$this->slug.business_shortcode");
        $passkey = Config::get("mpesa.accounts.$this->slug.passkey");
        $stkpush_url = Config::get("mpesa.accounts.stkpush_url");

        $timestamp = date("Ymdhis");
        $password = base64_encode($business_shortcode . $passkey . $timestamp);

        $data = array(
            'BusinessShortCode' => $business_shortcode,
            'Password' => $password,
            'Timestamp' => $timestamp,
            'CheckoutRequestID' => $checkout_request_id,
        );

        $response = $this->makeCall('mpesa/stkpushquery/v1/query', $data, is_initial:true);

        return $response;

    }
  
    /**
     * @param $InitiatorName |     This is the credential/username used to authenticate the transaction request.
     * @param $SecurityCredential | Encrypted password for the initiator to autheticate the transaction request
     * @param $CommandID | Unique command for each transaction type e.g. SalaryPayment, BusinessPayment, PromotionPayment
     * @param $Amount | The amount being transacted
     * @param $PartyA | Organizationâ€™s shortcode initiating the transaction.
     * @param $PartyB | Phone number receiving the transaction
     * @param $Remarks | Comments that are sent along with the transaction.
     * @param $QueueTimeOutURL | The timeout end-point that receives a timeout response.
     * @param $ResultURL | The end-point that receives the response of the transaction
     * @param $Occasion |     Optional
     * @return string
     */
    public function b2c($command = 'BusinessPayment', $amount, $remarks, $occasion)
    {

        $initiator_name = Config::get("mpesa.accounts.$this->slug.initiator_name");
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");
        $party_b = Config::get("mpesa.accounts.$this->slug.party_b");
        $reversal_queue_url = Config::get("mpesa.accounts.reversal_queue_url");
        $reversal_result_url = Config::get("mpesa.accounts.reversal_result_url");

        $encrypted_password = base64_encode($initiator_password);
        //Base64(OpenSSLEncrypt(Initiator Password + Certificate))

        $data = array(
            'InitiatorName' => $initiator_name,
            'SecurityCredential' => $encrypted_password,
            'CommandID' => $command,
            'Amount' => $amount,
            'PartyA' => $party_a,
            'PartyB' => $party_b,
            'Remarks' => $remarks,
            'QueueTimeOutURL' => $reversal_queue_url,
            'ResultURL' => $reversal_result_url,
            'Occasion' => $occasion,
        );

        $response = $this->makeCall('/mpesa/b2c/v1/paymentrequest', $data, is_initial:true);

        return $response;

    }
    /**
     * Use this function to initiate a C2B transaction
     * @param $ShortCode | 6 digit M-Pesa Till Number or PayBill Number
     * @param $CommandID | Unique command for each transaction type.
     * @param $Amount | The amount been transacted.
     * @param $Msisdn | MSISDN (phone number) sending the transaction, start with country code without the plus(+) sign.
     * @param $BillRefNumber |     Bill Reference Number (Optional).
     * @return mixed|string
     */
    public function c2b_simulate($amount, $phone, $account)
    {

        $type = Config::get("mpesa.accounts.$this->slug.type");
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");

        $data = array(
            'ShortCode' => $party_a,
            'CommandID' => ($type == 'paybill') ? 'CustomerPayBillOnline' : 'CustomerBuyGoodsOnline',
            'Amount' => $amount,
            'Msisdn' => $phone,
            'BillRefNumber' => $account,
        );

        $response = $this->makeCall('/mpesa/c2b/v1/simulate', $data, is_initial:true);

        return $response;

    }

    /**
     * Use this to initiate a balance inquiry request
     * @param $remarks | Comments that are sent along with the transaction.
     * @return mixed|string
     */
    public function accountBalance($remarks)
    {

        $type = Config::get("mpesa.accounts.$this->slug.type");
        $initiator_name = Config::get("mpesa.accounts.$this->slug.initiator_name");
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");
        $reversal_queue_url = Config::get("mpesa.accounts.reversal_queue_url");
        $reversal_result_url = Config::get("mpesa.accounts.reversal_result_url");

        $encrypted_password = base64_encode($initiator_password);
        //Base64(OpenSSLEncrypt(Initiator Password + Certificate))

        $data = array(
            'CommandID' => 'AccountBalance',
            'Initiator' => $initiator_name,
            'SecurityCredential' => $encrypted_password,
            'PartyA' => $party_a,
            'IdentifierType' => ($type == 'paybill') ? 4 : 2,
            'Remarks' => $remarks,
            'QueueTimeOutURL' => $reversal_queue_url,
            'ResultURL' => $reversal_result_url,
        );

        $response = $this->makeCall('/mpesa/accountbalance/v1/query', $data, is_initial:true);

        return $response;

    }

    /**
     * Use this function to make a transaction status request
     * @param $Initiator | The name of Initiator to initiating the request.
     * @param $SecurityCredential |     Encrypted password for the initiator to autheticate the transaction request.
     * @param $CommandID | Unique command for each transaction type, possible values are: TransactionStatusQuery.
     * @param $TransactionID | Organization Receiving the funds.
     * @param $PartyA | Organization/MSISDN sending the transaction
     * @param $IdentifierType | Type of organization receiving the transaction
     * @param $ResultURL | The path that stores information of transaction
     * @param $QueueTimeOutURL | The path that stores information of time out transaction
     * @param $Remarks |     Comments that are sent along with the transaction
     * @param $Occasion |     Optional Parameter
     * @return mixed|string
     */
    public function transactionStatus($mpesa_code, $remarks, $occasion)
    {
        $type = Config::get("mpesa.accounts.$this->slug.type");
        $initiator_name = Config::get("mpesa.accounts.$this->slug.initiator_name");
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");
        $reversal_queue_url = Config::get("mpesa.accounts.reversal_queue_url");
        $reversal_result_url = Config::get("mpesa.accounts.reversal_result_url");

        $encrypted_password = base64_encode($initiator_password);
        //Base64(OpenSSLEncrypt(Initiator Password + Certificate))

        $data = array(
            'Initiator' => $initiator_name,
            'SecurityCredential' => $encrypted_password,
            'CommandID' => 'TransactionStatusQuery',
            'TransactionID' => $mpesa_code,
            'PartyA' => $party_a,
            'IdentifierType' => ($type == 'paybill') ? 4 : 2,
            'ResultURL' => $reversal_result_url,
            'QueueTimeOutURL' => $reversal_queue_url,
            'Remarks' => $Remarks,
            'Occasion' => $Occasion,
        );

        $response = $this->makeCall('/mpesa/transactionstatus/v1/query', $data, is_initial:true);

        return $response;

    }

  /**
     * Use this function to initiate a reversal request
     * @param $mpesa_code | Unique Id received with every transaction response.
     * @param $amount | Amount
     * @param $ReceiverParty | Organization /MSISDN sending the transaction
     * @param $RecieverIdentifierType | Type of organization receiving the transaction
     * @param $ResultURL | The path that stores information of transaction
     * @param $QueueTimeOutURL | The path that stores information of time out transaction
     * @param $Remarks | Comments that are sent along with the transaction.
     * @param $Occasion |     Optional Parameter
     * @return mixed|string
     */
    public function reversal($mpesa_code, $amount, $remarks, $occasion = '', $reciever_identifier_type = 11)
    {

        $initiator_name = Config::get("mpesa.accounts.$this->slug.initiator_name");
        $initiator_password = Config::get("mpesa.accounts.$this->slug.initiator_password");
        $party_a = Config::get("mpesa.accounts.$this->slug.party_a");
        $reversal_queue_url = Config::get("mpesa.accounts.reversal_queue_url");
        $reversal_result_url = Config::get("mpesa.accounts.reversal_result_url");

        $encrypted_password = base64_encode($initiator_password);
        //Base64(OpenSSLEncrypt(Initiator Password + Certificate))

        $data = array(
            'CommandID' => 'TransactionReversal',
            'Initiator' => $initiator_name,
            'SecurityCredential' => $encrypted_password,
            'TransactionID' => $mpesa_code,
            'Amount' => $amount,
            'ReceiverParty' => $party_a,
            'RecieverIdentifierType' => $RecieverIdentifierType,
            'ResultURL' => $reversal_result_url,
            'QueueTimeOutURL' => $reversal_queue_url,
            'Remarks' => $remarks,
            'Occasion' => $occasion,
        );

        $response = $this->makeCall('/mpesa/reversal/v1/request', $data, is_initial:true);

        return $response;

    }

    public function makeCall($url_path, $data = [], $token = false, $is_initial = false)
    {

        $sandbox = Config::get("mpesa.accounts.$this->slug.sandbox");
        $consumer_secret = Config::get("mpesa.accounts.$this->slug.consumer_secret");
        $consumer_key = Config::get("mpesa.accounts.$this->slug.consumer_key");

        $url = ($sandbox) ? 'https://api.safaricom.co.ke' : 'https://sandbox.safaricom.co.ke';

        $token = $token ? $token : $this->token;
        $url = $url . '/' . ltrim($url_path, '/');

        if (!isset($consumer_key) || !isset($consumer_secret)) {
            throw new Exception("Please declare the consumer key and consumer secret as defined in the documentation", 1);
        }

        if (!$this->token && !$token) {
            throw new Exception("Token was not fetched.", 1);
        }

        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, $url);
        $credentials = base64_encode($consumer_key . ':' . $consumer_secret);
        if ($is_initial) {
            curl_setopt($curl, CURLOPT_HTTPHEADER, array('Authorization: Basic ' . $credentials)); //setting a custom header
        } else {
            curl_setopt($curl, CURLOPT_HTTPHEADER, array('Content-Type:application/json', 'Authorization:Bearer ' . $token));
        }

        if (!empty($data)) {

            $data_string = json_encode($data);

            curl_setopt($curl, CURLOPT_POSTFIELDS, $data_string);
            curl_setopt($curl, CURLOPT_POST, true);
        }
        curl_setopt($curl, CURLOPT_HEADER, false);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);

        $curl_response = curl_exec($curl);

        return json_decode($curl_response, true);

    }

}
